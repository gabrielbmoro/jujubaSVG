{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-jujubasvg-documentation","title":"Welcome to the JujubaSVG documentation! \ud83d\udc4b","text":"<p>JujubaSVG library is a friendly Android library to handle SVG files in your Android app. The library allows you to manipulate piece by piece of your SVG. If you have an id for the element, you can access it to change background, stroke, and other things.</p> <p>Take a look at our repository.</p>"},{"location":"#summary","title":"Summary","text":""},{"location":"#1-getting-started","title":"1. Getting started","text":""},{"location":"#2-available-commands","title":"2. Available commands","text":""},{"location":"#3-contributions","title":"3. Contributions","text":""},{"location":"1-getting-started/","title":"Getting started \ud83d\ude80","text":""},{"location":"1-getting-started/#1-add-the-dependency","title":"1. Add the Dependency","text":"<p>You need to add the following line in your desired module/build.gradle.kts:</p> <pre><code>implementation(\"io.github.codandotv:jujubaSVG:&lt;library version&gt;\")\n</code></pre>"},{"location":"1-getting-started/#2-define-your-commander","title":"2. Define your Commander","text":"<p>You need to define at the top level of your composable function the commander (a friend that will help you to send commands to the library):</p> <pre><code>@Composable\nfun YourComposable() {\n    val jujubaCommander = rememberJujubaCommander()\n    // ...\n}\n</code></pre>"},{"location":"1-getting-started/#3-declare-the-widget-to-render-the-svg","title":"3. Declare the Widget to render the SVG","text":"<p>Now you need to declare the Widget responsible to render the SVG file:</p> <pre><code>@Composable\nfun YourComposable() {\n    val jujubaCommander = rememberJujubaCommander()\n\n    JujubaSVG(\n        svgText = svgText,\n        onElementClick = { nodeInfo -&gt;\n            println(\"NodeInfo $nodeInfo\")\n            coroutineScope.launch {\n                // commander sample\n                jujubaCommander.execute(\n                    Command.RemoveNode(\n                        nodeInfo.id\n                    )\n                )\n            }\n        },\n        commander = jujubaCommander,\n    )\n}\n</code></pre> <p>Don\u2019t forget:</p> <ul> <li><code>svgText</code> should contain all content of your SVG file.</li> </ul> <p>\u2013</p> <p>Any problems you are facing, any suggestions you want to add, please feel free to reach us out.</p>"},{"location":"2-available-commands/","title":"Available Commands \ud83d\udcd0","text":"<p>We have some commands already provided by the library.</p>"},{"location":"2-available-commands/#update-background-color","title":"Update background color","text":"<p>Update the background color of a node. For example:</p> <pre><code>jujubaCommander.execute(\n    Command.UpdateBackgroundColor(\n        id = nodeInfo.id,\n        color = getRainbowColor()\n    )\n)\n</code></pre>"},{"location":"2-available-commands/#update-stroke-color","title":"Update stroke color","text":"<p>Update the stroke color of a node.</p> <pre><code>jujubaCommander.execute(\n    Command.UpdateStrokeColor(\n        id = nodeInfo.id,\n        color = getRainbowColor()\n    )\n)\n</code></pre>"},{"location":"2-available-commands/#update-stroke-width","title":"Update stroke width","text":"<p>Update the stroke width of a node.</p> <pre><code>jujubaCommander.execute(\n    Command.UpdateStrokeWidth(\n        id = nodeInfo.id,\n        widthInPx = 20\n    )\n)\n</code></pre>"},{"location":"2-available-commands/#remove-a-node","title":"Remove a node","text":"<p>Remove a node.</p> <pre><code>jujubaCommander.execute(\n    Command.RemoveNode(\n        id = nodeInfo.id\n    )\n)\n</code></pre>"},{"location":"2-available-commands/#update-root-background-color","title":"Update root background color","text":"<p>Update the root background color.</p> <pre><code>jujubaCommander.execute(\n    Command.UpdateRootBackgroundColor(\n        color = Color.White\n    )\n)\n</code></pre>"},{"location":"2-available-commands/#add-rounded-image","title":"Add Rounded Image","text":"<p>Add a rounded image into the same parent of the elementId.</p> <pre><code>jujubaCommander.execute(\n    AddRoundedImage(\n        elementId = nodeInfo.id,\n        imageId = \"imageId\",\n        imageUrl = \"www.myimage.com\",\n        widthInPx = 56,\n        heightInPx = 56,\n        coordinate = NodeCoordinate(0f, 120f)\n    )\n)\n</code></pre> <p>In this case, the current module should depend on any module whose name includes \u2018util-something\u2019. This rule is useful if you need to enforce that a module depends only on utility modules.</p>"},{"location":"3-contributions/","title":"Contributions \ud83e\udd1d","text":"<p>We encourage contributions of all types! Whether it\u2019s reporting issues, suggesting new features, or submitting pull requests, you\u2019re welcome to help improve the plugin.</p> <ul> <li>Check out the issues page for ideas.</li> <li>Feel free to submit pull requests.</li> </ul>"},{"location":"3-contributions/#some-tips","title":"Some tips","text":"<ul> <li>If you have any questions about contributions, feel free to reach out to someone from CodandoTV. You can contact Gabriel Moro or Rodrigo Vianna.</li> </ul>"}]}